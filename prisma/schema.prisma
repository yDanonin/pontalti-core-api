generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  name     String
  isAdmin  Boolean? @default(false)
}

model Adresses {
  id             Int     @id @default(autoincrement())
  zip_code       String
  neighborhood   String
  public_place   String
  city           String
  state          String
  complement     String?
  address_number Int

  vendors   Vendors[]
  customers Customers[]
}

model Customers {
  id             Int      @id @default(autoincrement())
  status         Int
  address_id     Int
  credit_limit   Float
  debts          Float
  name           String
  phone          String
  cel_number     String
  email          String   @unique
  store_name     String
  deliver        Boolean
  pontalti       Boolean
  secondary_line Boolean
  cpf            String?  @unique
  cnpj           String?  @unique
  created_at     DateTime @default(now())
  updated_at     DateTime

  address Adresses @relation(fields: [address_id], references: [id])

  //TODO: Review this nomenclature, if plural makes sense 
  Order Orders[]
}

model Employees {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  name           String
  phone          String
  cel_number     String
  cpf            String    @unique
  classification Int
  admission      DateTime
  salary         Float?
  dismissal_date DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  schedules Schedules[]
  workHours WorkHours[]
  vacations Vacations[]
}

model Vendors {
  id               Int      @id @default(autoincrement())
  name             String
  address_id       Int
  store_name       String
  cnpj             String   @unique
  status           Int
  phone            String
  cel_number       String
  deliver          Boolean
  volume_purchases Float
  purchases        Float
  invoicing        Float
  created_at       DateTime @default(now())
  updated_at       DateTime

  address Adresses @relation(fields: [address_id], references: [id])

  materialOrders MaterialOrders[]
}

model Products {
  id           Int      @id @default(autoincrement())
  status       Int
  volume_sales Float
  sales        Float
  invoicing    Float
  name         String
  model        String
  size         String
  character    String
  moldes       Int
  equivalency  Float
  created_at   DateTime @default(now())
  updated_at   DateTime

  materialOrders MaterialOrders[]
  orders         OrderItems[]
}

model Machines {
  id              Int      @id @default(autoincrement())
  model           String
  machine_number  Int
  status          Int
  location        String
  location_status Int
  created_at      DateTime @default(now())
  updated_at      DateTime
}

model Procedures {
  id           Int      @id @default(autoincrement())
  process_name String
  status       Int
  workers      Int
  created_at   DateTime @default(now())
  updated_at   DateTime
}

model Schedules {
  id          Int      @id @default(autoincrement())
  employee_id Int
  day_of_week Int
  start_time  String   @default("09:00:00")
  end_time    String   @default("18:00:00")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  employee Employees @relation(fields: [employee_id], references: [id])

  @@index([employee_id, day_of_week], name: "employee_dayOfWeek_idx")
}

model WorkHours {
  id          Int       @id @default(autoincrement())
  employee_id Int
  clock_in    DateTime
  clock_out   DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  employee Employees @relation(fields: [employee_id], references: [id])
}

model Vacations {
  id          Int      @id @default(autoincrement())
  employee_id Int
  start_date  DateTime
  end_date    DateTime
  sold_days   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  employee Employees @relation(fields: [employee_id], references: [id])
}

model TimeConfiguration {
  id                    Int      @id @default(autoincrement())
  day_of_week           Int
  work_start            String   @default("09:00:00")
  work_end              String   @default("18:00:00")
  late_limit_in_minutes Int
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
}

//TODO: Review 1 order could have n products.
model Orders {
  id          Int      @id @default(autoincrement())
  final_price Float
  date        DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  customer_id Int

  customer Customers @relation(fields: [customer_id], references: [id])

  payments       Payments[]
  productReturns ProductReturns[]
  products       OrderItems[]
}

model OrderItems {
  order_id   Int
  product_id Int
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  order   Orders   @relation(fields: [order_id], references: [id])
  product Products @relation(fields: [product_id], references: [id])

  @@id([order_id, product_id])
}

model Payments {
  id             Int      @id @default(autoincrement())
  amount_paid    Float
  remaining      Float
  payment_method String
  date           DateTime
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  order_id Int

  order Orders @relation(fields: [order_id], references: [id])
}

model MaterialOrders {
  id               Int      @id @default(autoincrement())
  date             DateTime
  amount           Int
  unit             String
  storage_location String
  received_by      String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  product_id       Int
  vendor_id        Int

  product Products @relation(fields: [product_id], references: [id])
  vendor  Vendors  @relation(fields: [vendor_id], references: [id])
}

//TODO: Review delivery logic
model ProductReturns {
  id                    Int      @id @default(autoincrement())
  amount                Int
  return_reason         String
  replacement_necessary Boolean
  resold                Boolean
  date                  DateTime
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  order_id Int

  order Orders @relation(fields: [order_id], references: [id])

  returnedLabels ReturnedLabels[]
}

model ReturnedLabels {
  id          Int     @id @default(autoincrement())
  ticket_code String  @unique
  opened      Boolean

  product_return_id Int

  product_return ProductReturns @relation(fields: [product_return_id], references: [id])
}
